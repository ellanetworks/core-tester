// Code generated by bpf2go; DO NOT EDIT.

package ebpf

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// LoadGTP returns the embedded CollectionSpec for GTP.
func LoadGTP() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_GTPBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load GTP: %w", err)
	}

	return spec, err
}

// LoadGTPObjects loads GTP and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*GTPObjects
//	*GTPPrograms
//	*GTPMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func LoadGTPObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := LoadGTP()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// GTPSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type GTPSpecs struct {
	GTPProgramSpecs
	GTPMapSpecs
	GTPVariableSpecs
}

// GTPProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type GTPProgramSpecs struct {
	Gtp *ebpf.ProgramSpec `ebpf:"gtp"`
}

// GTPMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type GTPMapSpecs struct {
	GnbIpMap *ebpf.MapSpec `ebpf:"gnb_ip_map"`
	TeidMap  *ebpf.MapSpec `ebpf:"teid_map"`
	UpfIpMap *ebpf.MapSpec `ebpf:"upf_ip_map"`
}

// GTPVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type GTPVariableSpecs struct {
}

// GTPObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to LoadGTPObjects or ebpf.CollectionSpec.LoadAndAssign.
type GTPObjects struct {
	GTPPrograms
	GTPMaps
	GTPVariables
}

func (o *GTPObjects) Close() error {
	return _GTPClose(
		&o.GTPPrograms,
		&o.GTPMaps,
	)
}

// GTPMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to LoadGTPObjects or ebpf.CollectionSpec.LoadAndAssign.
type GTPMaps struct {
	GnbIpMap *ebpf.Map `ebpf:"gnb_ip_map"`
	TeidMap  *ebpf.Map `ebpf:"teid_map"`
	UpfIpMap *ebpf.Map `ebpf:"upf_ip_map"`
}

func (m *GTPMaps) Close() error {
	return _GTPClose(
		m.GnbIpMap,
		m.TeidMap,
		m.UpfIpMap,
	)
}

// GTPVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to LoadGTPObjects or ebpf.CollectionSpec.LoadAndAssign.
type GTPVariables struct {
}

// GTPPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to LoadGTPObjects or ebpf.CollectionSpec.LoadAndAssign.
type GTPPrograms struct {
	Gtp *ebpf.Program `ebpf:"gtp"`
}

func (p *GTPPrograms) Close() error {
	return _GTPClose(
		p.Gtp,
	)
}

func _GTPClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed gtp_bpf.o
var _GTPBytes []byte
